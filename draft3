library(rvest); library(tidyverse); library(stringr)
library(httr2); library(janitor)
library(RSelenium); library(netstat)

# Scrape all link text
link_text = "https://web.archive.org/web/timemap/json?url=https://www.bjjcompsystem.com/tournaments/1869/categories&matchType=prefix&collapse=urlkey&output=json&fl=original,mimetype,timestamp,endtimestamp,groupcount,uniqcount&filter=!statuscode:[45]..&limit=10000&_=1663136483842" %>% 
  request() %>% 
  req_perform() %>% 
  resp_body_json(simplifyVector = TRUE) %>% 
  as_tibble() %>% 
  row_to_names(1)

link_text = link_text[-c(1, 788:790),]
link_text2 = link_text
link_text2 = as.list(substr(link_text2$original, 1, 65)) 
link_text2 = link_text2[!duplicated(link_text2)]
head(link_text2)

#Create prefix to add to links
prefix = 'https://web.archive.org/web/20220000000000*/'

# Add prefix to links
links = str_c(prefix, link_text2)

# Start server
remote_driver = rsDriver(browser = 'firefox',
                         verbose = F,
                         port = free_port())
rd = remote_driver$client
rd$open()
rd$navigate('https://web.archive.org/web/20220000000000*/https://www.bjjcompsystem.com/tournaments/1869/categories/2053147&')
rd$maxWindowSize()

# Know length for the loop
length(links)

## create empty vector  
master.tree = data.frame()
# use to help keep track of the element
x=0

# Start scraping! ----
for (i in 128:437){
  rd$navigate(links[i])
  Sys.sleep(15)
  date = rd$findElement(using = 'css', '.captures-range-info a:last-of-type')
  date$clickElement()
  Sys.sleep(15)
  
  # Get pg source to read html data
  html = read_html(rd$getPageSource()[[1]])

  # extract HTML for each match
matches <- html %>%
  html_elements(css = '.tournament-category__match')

# define function to parse match info considering what to repeat
parseMatch <- function(element, selector, fill){
  info <- element %>% 
    html_elements(css = selector) %>% 
    html_text()
  parsed_info <- c()
  if(length(info) > 1){
    parsed_info <- info
    } else if(length(info) == 1) { if(fill){ parsed_info <- rep(info, length.out = 2) } else{ parsed_info <- c(info, NA) } } else{ parsed_info <- c("BYE", NA) }

  return(parsed_info)
}

# define function to get fight info
getMatchInfo <- function(match){

  # create a df with match info
  df <- data.frame(fightAndMat = parseMatch(match,'.bracket-match-header__where', TRUE),
                   date = parseMatch(match,'.bracket-match-header__when', TRUE),
                   competitor = parseMatch(match,'.match-card__competitor-n', FALSE),
                   name = parseMatch(match,'.match-card__competitor-name', FALSE),
                   gym = parseMatch(match,'.match-card__club-name', FALSE)) 

  return(df)
}

# iterate through fights to get information
match_info <- map_df(matches, getMatchInfo)

# grab tournament info
tourney <- html %>% 
  html_elements(css = ".category-title__label") %>% 
  html_text2()

# add tournament info to fighter info and replace NAs with "BYE"
tree <- match_info %>%
  mutate('division' = tourney[1],
         'gender' = tourney[2],
         'belt' = tourney[3],
         'weight' = tourney[4]) %>%
  relocate(c('division', 'gender', 'belt', 'weight'))

master.tree = rbind(master.tree, tree)

# Update element count
x = x+1

# check completed links
print(links[i]); print(paste('Element', x, "is done"))
}

# end loop ----
# Use to verify which element loop broke at
which(links==paste0(prefix,'https://www.bjjcompsystem.com/tournaments/1869/categories/2053170'))
which(links=='https://web.archive.org/web/20220000000000*/https://www.bjjcompsystem.com/tournaments/1869/categories/2053274')

# END SESSION! ----
rd$deleteAllCookies() 
rd$quit() 
rd$closeServer()

# save unedited master.tree (16342 x 9)
#write.csv(master.tree, '/Users/melissaalejandro/iCloud Drive (Archive) - 3/Documents/Documents - Melissaâ€™s MacBook Pro/Research/ibjjf/draft3_unedited.csv')

# Data Cleaning -----------------------------------------
master.tree = master.tree %>%
    mutate(fight = sub(':.*', '', master.tree$fightAndMat)) %>%
    relocate(fight, .before = date) 
master.tree = master.tree[ -5]

# Move every other row to a new column
master.tree = master.tree %>%
  group_by(grp = str_c('Column', rep(1:2, length.out = n()))) %>%
  mutate(rn = row_number()) %>%
  ungroup %>%
  pivot_wider(names_from = grp, values_from = c(competitor, name, gym)) %>%
  select(-rn)

# rename and reorder column names
master.tree = master.tree %>% 
  rename(winner.rank = competitor_Column1, winner = name_Column1, winner.gym = gym_Column1, opp.rank = competitor_Column2, opponent = name_Column2, opp.gym = gym_Column2) 

master.tree <- master.tree[, c(1:7, 9, 11, 8, 10, 12)]

# remove rows if there's an na in fight column
master.tree = master.tree %>% drop_na(c("fight"))

# move time to a new column
master.tree = master.tree %>%
  separate(date, into = c('day', 'time'), sep = ' at ', remove = FALSE)

# Replaces remaining NAs with 'BYE'
master.tree[is.na(master.tree)] <- 'BYE'




